HANDLING USER INPUT
- White listing in front end 
- Sanificazione in back end
- Controllare se il tipo di input ricevuto matcha con quello atteso (es. stringa per username)
- Durante l'inserimento dei file limitare il tipo del file (solo pdf)

MANTAINING LOGS
- Registra attività di autenticazione, tentativi di accesso bloccati, password recovery
  PATTERN: <timestamp><IP>/<user account if logged> <message>

DIRECTORY BRUTEFORCING 
- Rimuovi file sensibili dalla cartella pubblica

USER ENUMERATION
- Messaggi non informativi

LOGIN BRUTEFORCING
- Blocca l'account, invia una mail all'utente e fai credere all'attaccante di poter continuare a fare login
- Forza l'utilizzo di password forti (tramite validazione front e back end)
- No messaggi espliciti (controllare la self-registration)
- Nel caso di creazione utente, se l'utente non è registrato invia email di conferma registrazione, altrimenti invia una mail per allertare l'utente esistente

SECURE CREDENTIAL STORAGE
- Usa bcrypt per hashare la password (password_hash()) e per comparare al momento del login (password_verify())
- Rimuovere la colonna salt dal db

TOKEN/COOKIES
- Trasmettere i token come secure cookies
- Utilizzare l'attributo SameSite nei cookies (per request forgery)

ACCESS CONTROL
- Utilizzare token di sessione per autorizzare l'utente ($_SESSION[user-type])

SQL INJECTION
- Utilizzare prepared statements

OS COMMAND INJECTION
- Non utilizzare funzioni che accedono al sistema (system()), ma utilizzare funzioni che fanno compiti simili al nostro incorporate in librerie php
- Creare un child process (vedere slide 5) nel caso

PATH TRAVERSAL
- Utilizzare il real path per recuperare il file

TYPE JUGGLING
- Utilizzare solamente strict comparisons (=== / !==)

CROSS-SITE SCRIPTING
- Utilizzare il same origin policy (SOP)
- Validare input e output (per mostrare input inseriti dall'utente utilizzare htmlspecialchars(stringa, ENT_QUOTES)) --> Reflected and stored XSS
- Per mostrarlo, validarlo a client-side creando un nodo di solo testo (document.createTextNode) --> DOM-based XSS
- Utilizzare il Content Security Policy (CSP) includendolo nell'header nella risposta

ON-SITE REQUEST FORGERY
- Validare gli input

CROSS-SITE REQUEST FORGERY
- Utilizzare l'attributo SameSite nei cookies
- Crea anti-CSRF token

CLICKJACKING
- Proteggere la pagina con la direttiva frame-ancestors CSP
